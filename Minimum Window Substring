# cpp

int n = s.length();
		int m = t.length();
		int j=0,f=0,mn=INT_MAX,st=0;
		vector<int> vs(81),vt(81);
		for(int i=0;i<m;i++) vt[t[i]-'A']++;
		for(int i=0;i<n;i++)  {
			vs[s[i]-'A']++;
			while(j<i&&vs[s[j]-'A']>vt[s[j]-'A']) {
				vs[s[j++]-'A']--;
			}
			f=0;
			for(int k=0;k<81;k++) {
				if(vt[k]&&vt[k]>vs[k]) {
					f=1;
					break;
				}
			}
			if(!f) {
				if(mn>i-j+1) {
					mn=i-j+1;
					st=j;
				}
			}
		}
		return mn==INT_MAX?"":s.substr(st,mn);
	}


#python

class Solution:
    def minWindow(self, s: str, t: str) -> str:
        need, missing = collections.Counter(t), len(t)
        i = I = J = 0
        for j, c in enumerate(s, 1):
            missing -= need[c] > 0
            need[c] -= 1
            if not missing:
                while i < j and need[s[i]] < 0:
                    need[s[i]] += 1
                    i += 1
                if not J or j - i <= J - I:
                    I, J = i, j
        return s[I:J]
