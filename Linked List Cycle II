#JAVA

public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow=head,fast=head;
        boolean cycle=false;
        while(fast!=null&&fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast){
                cycle=true;
                break;
            }
        }
        if(cycle==false)return null;
        slow=head;
        while(slow!=fast){
            slow=slow.next;
            fast=fast.next;}
        return slow;
        
    }
}



#CPP

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        unordered_set<ListNode*> st;
        
        while(head){
            if(st.find(head) != st.end())
                return head;
            st.insert(head);
            head = head->next;
        }
        return  NULL;
    }
};

#PYTHON
